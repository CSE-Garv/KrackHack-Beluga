rule Suspicious_PE_Imports
{
    meta:
        description = "Detects PE files with suspicious API imports commonly used in malware"
        author = "CyberSecurity Researcher"
        reference = "Malware analysis reports"
    strings:
        $virtualalloc = "VirtualAlloc"
        $writeprocessmemory = "WriteProcessMemory"
        $createremotethread = "CreateRemoteThread"
        $loadlibrary = "LoadLibraryA"
        $getprocaddress = "GetProcAddress"
    condition:
        2 of ($*)
}

rule UPX_Packed_PE
{
    meta:
        description = "Detects PE files packed with UPX (common in malware)"
    strings:
        $upx1 = "UPX!"
        $upx2 = "UPX0"
        $upx3 = "UPX1"
    condition:
        any of them
}

rule Encrypted_Strings
{
    meta:
        description = "Detects obfuscated or encrypted strings in PE files"
    strings:
        $base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
        $xor_key = { 0F B6 04 01 8B C8 83 E1 07 83 C0 07 33 C8 66 83 C1 07 }
        $aes_key = { 89 4C 24 08 89 54 24 04 89 44 24 0C 8D 4C 24 04 }
    condition:
        any of them
}

rule Malware_Loader
{
    meta:
        description = "Detects common malware loaders in PE files"
    strings:
        $reflective_loader = "ReflectiveLoader"
        $manual_mapping = "ManualMap"
        $runpe = "RunPE"
    condition:
        any of them
}

rule Suspicious_Sections
{
    meta:
        description = "Detects PE files with suspicious section names"
    strings:
        $section1 = ".text"
        $section2 = ".rdata"
        $section3 = ".data"
        $section4 = ".bss"
        $section5 = ".rsrc"
        $section6 = ".reloc"
    condition:
        2 of ($*) and filesize < 5MB
}

rule CodeInjection
{
    meta:
        description = "Detects PE files that use process injection techniques"
    strings:
        $ntopenprocess = "NtOpenProcess"
        $ntwritevirtualmemory = "NtWriteVirtualMemory"
        $ntcreatethreadex = "NtCreateThreadEx"
        $ntmapviewofsection = "NtMapViewOfSection"
    condition:
        2 of them
}

rule Anti_Debugging
{
    meta:
        description = "Detects anti-debugging techniques in PE files"
    strings:
        $isdebuggerpresent = "IsDebuggerPresent"
        $checkremotedebuggerpresent = "CheckRemoteDebuggerPresent"
        $outputdebugstring = "OutputDebugStringA"
    condition:
        any of them
}

rule Detect_Laxy_Trojan
{
    meta:
        description = "Detects Laxy Trojan based on strings, network activity, and behavior"
        family = "Laxy Trojan"
        reference = "Threat research on Laxy Trojan"
    strings:
        $tor_start = "tor.exe"
        $config_file = "torrc"
        $dll_name = "lazytor.dll"
        $proxy_usage = "127.0.0.1:9050"
        $startup_persistence = "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
        $encryption_key = { 31 34 37 32 68 65 6c 6c 6f 77 6f 72 6c 64 }
    condition:
        any of them
}

rule Laxy_Network_Communication
{
    meta:
        description = "Detects Laxy Trojan's network behavior (Tor and C2 communication)"
        reference = "Threat research"
    strings:
        $tor_network = "torproject.org"
        $hidden_service = ".onion"
        $c2_ip = "192.168.56.101"
        $c2_command = "GET /update HTTP/1.1"
    condition:
        any of them
}

rule Suspicious_Patterns
{
    meta:
        description = "Detects suspicious scripting activity"
    strings:
        $exec = "exec("
        $eval = "eval("
        $subproc = "subprocess."
        $socket = "socket."
    condition:
        any of them
}
// Rule to detect common credential stealing patterns
rule CredentialStealer {
    meta:
        description = "Detects common patterns used in credential stealing malware"
        author = "Security Researcher"
        date = "2024-02"
        
    strings:
        $pass_str1 = "password" nocase
        $pass_str2 = "pwd" nocase
        $pass_str3 = "login" nocase
        $registry1 = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows Credentials"
        $registry2 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Credentials"
        $api1 = "CredEnumerateW"
        $api2 = "SamIConnect"
        
    condition:
        uint16(0) == 0x5A4D and
        2 of ($pass_str*) and
        1 of ($registry*) and
        1 of ($api*)
}

// Rule to detect common ransomware behaviors
rule PotentialRansomware {
    meta:
        description = "Detects common ransomware characteristics"
        author = "Security Researcher"
        date = "2024-02"
        
    strings:
        $encrypt_str1 = "encrypt" nocase
        $encrypt_str2 = "crypto" nocase
        $encrypt_str3 = ".locked" nocase
        $encrypt_str4 = "ransom" nocase
        $encrypt_api1 = "CryptEncrypt"
        $encrypt_api2 = "CryptGenKey"
        $file_ext = {2E 65 6E 63} // ".enc"
        
    condition:
        uint16(0) == 0x5A4D and
        2 of ($encrypt_str*) and
        1 of ($encrypt_api*) and
        $file_ext
}

// Rule to detect keylogger behavior
rule KeyloggerBehavior {
    meta:
        description = "Detects potential keylogging functionality"
        author = "Security Researcher"
        date = "2024-02"
        
    strings:
        $api1 = "SetWindowsHookEx" wide
        $api2 = "GetAsyncKeyState" wide
        $api3 = "GetForegroundWindow" wide
        $log_str1 = "keylog" nocase
        $log_str2 = "hook" nocase
        $log_file = /[a-zA-Z0-9_-]*\.log$/
        
    condition:
        uint16(0) == 0x5A4D and
        2 of ($api*) and
        1 of ($log_str*) and
        $log_file
}

// Rule to detect suspicious PowerShell usage
rule SuspiciousPowerShell {
    meta:
        description = "Detects suspicious PowerShell patterns often used in malware"
        author = "Security Researcher"
        date = "2024-02"
        
    strings:
        $ps1 = "powershell.exe" nocase wide
        $encode1 = "-enc" wide
        $encode2 = "-encodedcommand" wide
        $encode3 = "-e " wide
        $bypass1 = "-ExecutionPolicy bypass" wide
        $bypass2 = "-ep bypass" wide
        $hidden = "-windowstyle hidden" wide
        $web = "downloadstring(" nocase wide
        
    condition:
        uint16(0) == 0x5A4D and
        $ps1 and
        1 of ($encode*) and
        1 of ($bypass*) and
        ($hidden or $web)
}
// Rule to detect common backdoor characteristics
rule PotentialBackdoor {
    meta:
        description = "Detects common backdoor and remote access patterns"
        author = "Security Researcher"
        date = "2024-02"
        
    strings:
        $socket_api1 = "WSAStartup"
        $socket_api2 = "socket"
        $socket_api3 = "connect"
        $socket_api4 = "recv"
        $socket_api5 = "send"
        $cmd1 = "cmd.exe" nocase wide
        $cmd2 = "powershell.exe" nocase wide
        $persistence = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run" wide
        
    condition:
        uint16(0) == 0x5A4D and
        3 of ($socket_api*) and
        1 of ($cmd*) and
        $persistence
}

// Rule to detect common process injection techniques
rule ProcessInjection {
    meta:
        description = "Detects common process injection patterns"
        author = "Security Researcher"
        date = "2024-02"
        
    strings:
        $inject_api1 = "VirtualAllocEx"
        $inject_api2 = "WriteProcessMemory"
        $inject_api3 = "CreateRemoteThread"
        $inject_api4 = "NtCreateThreadEx"
        $proc_api1 = "OpenProcess"
        $proc_api2 = "Process32Next"
        $proc_api3 = "FindWindowA"
        
    condition:
        uint16(0) == 0x5A4D and
        2 of ($inject_api*) and
        1 of ($proc_api*)
}

// Rule to detect common shellcode loaders
rule ShellcodeLoader {
    meta:
        description = "Detects potential shellcode loading patterns"
        author = "Security Researcher"
        date = "2024-02"
        
    strings:
        $alloc_api1 = "VirtualAlloc"
        $alloc_api2 = "HeapCreate"
        $mem_api1 = "RtlMoveMemory"
        $mem_api2 = "memcpy"
        $exec_api1 = "CreateThread"
        $exec_api2 = "CreateFiber"
        // Common shellcode patterns
        $shellcode1 = { FC 48 83 E4 F0 E8 }  // Common x64 shellcode starter
        $shellcode2 = { 55 89 E5 83 EC }     // Common x86 shellcode starter
        
    condition:
        uint16(0) == 0x5A4D and
        1 of ($alloc_api*) and
        1 of ($mem_api*) and
        1 of ($exec_api*) and
        1 of ($shellcode*)
}

// Rule to detect common sandbox evasion techniques
rule SandboxEvasion {
    meta:
        description = "Detects sandbox detection and evasion attempts"
        author = "Security Researcher"
        date = "2024-02"
        
    strings:
        // VM detection strings
        $vm1 = "VMware" nocase wide
        $vm2 = "VBox" nocase wide
        $vm3 = "QEMU" nocase wide
        
        // Sandbox detection APIs
        $api1 = "GetTickCount"
        $api2 = "QueryPerformanceCounter"
        $api3 = "GetSystemInfo"
        $api4 = "GetProcessorNameString"
        
        // Common sandbox processes to detect
        $proc1 = "wireshark.exe" nocase wide
        $proc2 = "procmon.exe" nocase wide
        $proc3 = "ollydbg.exe" nocase wide
        
    condition:
        uint16(0) == 0x5A4D and
        1 of ($vm*) and
        2 of ($api*) and
        1 of ($proc*)
}

// Rule to detect common payload droppers
rule PayloadDropper {
    meta:
        description = "Detects characteristics of payload droppers"
        author = "Security Researcher"
        date = "2024-02"
        
    strings:
        // File operations
        $file_api1 = "CreateFileA"
        $file_api2 = "WriteFile"
        $file_api3 = "CopyFileA"
        
        // Resource access
        $res_api1 = "FindResourceA"
        $res_api2 = "LoadResource"
        
        // Common dropped file extensions
        $ext1 = ".exe" nocase wide
        $ext2 = ".dll" nocase wide
        $ext3 = ".dat" nocase wide
        
        // Suspicious paths
        $path1 = "%TEMP%" nocase wide
        $path2 = "%APPDATA%" nocase wide
        
    condition:
        uint16(0) == 0x5A4D and
        2 of ($file_api*) and
        1 of ($res_api*) and
        1 of ($ext*) and
        1 of ($path*)
}
// 1. Trojan Detection
rule TrojanDetection {
    meta:
        description = "Detects common Trojan characteristics"
        malware_type = "Trojan"
        
    strings:
        // Command & Control patterns
        $c2_1 = "POST /gate.php" nocase
        $c2_2 = "POST /panel/" nocase
        $c2_3 = "/admin/gate" nocase
        
        // Common registry modifications
        $reg1 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"
        $reg2 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce"
        
        // System modifications
        $sys1 = "netsh firewall set" nocase
        $sys2 = "sc config" nocase
        
    condition:
        uint16(0) == 0x5A4D and
        1 of ($c2_*) and
        1 of ($reg*) and
        1 of ($sys*)
}

// 2. Spyware Detection
rule SpywareDetection {
    meta:
        description = "Detects spyware behaviors"
        malware_type = "Spyware"
        
    strings:
        // Keylogging functions
        $keylog1 = "GetAsyncKeyState"
        $keylog2 = "SetWindowsHookEx"
        
        // Screenshot capabilities
        $screen1 = "CreateDC"
        $screen2 = "BitBlt"
        $screen3 = "GetDC"
        
        // Data exfiltration
        $exfil1 = "smtp://" nocase
        $exfil2 = "ftp://" nocase
        $exfil3 = ".zip" nocase
        
    condition:
        uint16(0) == 0x5A4D and
        1 of ($keylog*) and
        2 of ($screen*) and
        1 of ($exfil*)
}

// 3. Rootkit Detection
rule RootkitDetection {
    meta:
        description = "Detects rootkit characteristics"
        malware_type = "Rootkit"
        
    strings:
        // Driver and kernel interactions
        $driver1 = "\\Driver\\" wide
        $driver2 = "\\Device\\" wide
        $kernel1 = "ntoskrnl.exe" nocase  // Used in condition 
        
        // System hooks
        $hook1 = "ZwCreateFile"
        $hook2 = "ZwQueryDirectoryFile"
        $hook3 = "ZwQuerySystemInformation"
        
        // SSDT manipulation
        $ssdt1 = "KeServiceDescriptorTable"
        $ssdt2 = "SystemCallTable"
        
    condition:
        uint16(0) == 0x5A4D and
        1 of ($driver*) and
        2 of ($hook*) and
        1 of ($ssdt*) and
        $kernel1  //  Now it is referenced!
}


// 4. RAT (Remote Access Trojan) Detection
rule RATDetection {
    meta:
        description = "Detects Remote Access Trojan patterns"
        malware_type = "RAT"
        
    strings:
        // Remote control functions
        $remote1 = "RemoteDesktop" nocase
        $remote2 = "WebCam" nocase
        $remote3 = "Microphone" nocase
        
        // Network operations
        $net1 = "WinSock" nocase
        $net2 = "WSAStartup"
        $net3 = "InternetOpen"
        
        // Common RAT commands
        $cmd1 = "upload" nocase
        $cmd2 = "download" nocase
        $cmd3 = "screenshot" nocase
        
    condition:
        uint16(0) == 0x5A4D and
        2 of ($remote*) and
        2 of ($net*) and
        1 of ($cmd*)
}

// 5. Cryptominer Detection
rule CryptominerDetection {
    meta:
        description = "Detects cryptocurrency mining malware"
        malware_type = "Cryptominer"
        
    strings:
        // Mining pool strings
        $pool1 = "stratum+tcp://" nocase
        $pool2 = "pool.minergate.com" nocase
        
        // CPU indicators
        $cpu1 = "cpuid"
        $cpu2 = "AVX2"
        
        // Common miner strings
        $miner1 = "xmrig" nocase
        $miner2 = "minerd" nocase
        $miner3 = "cryptonight" nocase
        
    condition:
        uint16(0) == 0x5A4D and
        1 of ($pool*) and
        1 of ($cpu*) and
        1 of ($miner*)
}

// 6. Information Stealer Detection
rule InfoStealerDetection {
    meta:
        description = "Detects information stealing malware"
        malware_type = "InfoStealer"
        
    strings:
        // Browser targeting
        $browser1 = "\\Mozilla\\Firefox\\Profiles\\" wide
        $browser2 = "\\Google\\Chrome\\User Data\\" wide
        $browser3 = "\\AppData\\Local\\Microsoft\\Edge\\" wide
        
        // Credential hunting
        $cred1 = "login data" nocase
        $cred2 = "credentials" nocase
        $cred3 = "password" nocase
        
        // File targeting
        $file1 = ".doc" nocase
        $file2 = ".pdf" nocase
        $file3 = ".txt" nocase
        
    condition:
        uint16(0) == 0x5A4D and
        1 of ($browser*) and
        2 of ($cred*) and
        1 of ($file*)
}

// 7. Worm Detection
rule WormDetection {
    meta:
        description = "Detects worm-like spreading behavior"
        malware_type = "Worm"
        
    strings:
        // Network spreading
        $net1 = "NetShareEnum"
        $net2 = "WNetOpenEnum"
        $net3 = "WNetEnumResource"
        
        // USB spreading
        $usb1 = "SetupDiGetDeviceRegistryProperty"
        $usb2 = "CreateFileW"
        
        // Self-replication
        $copy1 = "CopyFileW"
        $copy2 = "MoveFileW"
        $copy3 = "WriteFile"
        
    condition:
        uint16(0) == 0x5A4D and
        2 of ($net*) and
        1 of ($usb*) and
        1 of ($copy*)
}

// 8. Botnet Detection
rule BotnetDetection {
    meta:
        description = "Detects botnet malware characteristics"
        malware_type = "Botnet"
        
    strings:
        // Command reception
        $cmd1 = "JOIN #" nocase
        $cmd2 = "PRIVMSG #" nocase
        
        // DDoS capabilities
        $ddos1 = "HTTP flood" nocase
        $ddos2 = "SYN flood" nocase
        $ddos3 = "UDP flood" nocase
        
        // Bot identification
        $id1 = "bot_id" nocase
        $id2 = "unique_id" nocase
        
    condition:
        uint16(0) == 0x5A4D and
        1 of ($cmd*) and
        1 of ($ddos*) and
        1 of ($id*)
}

// 9. Keylogger Detection
rule KeyloggerDetection {
    meta:
        description = "Detects keylogging malware"
        malware_type = "Keylogger"
        
    strings:
        // Keyboard hooks
        $hook1 = "SetWindowsHookExA"
        $hook2 = "SetWindowsHookExW"
        $hook3 = "GetKeyboardState"
        
        // Window title capture
        $window1 = "GetForegroundWindow"
        $window2 = "GetWindowTextW"
        
        // Log file operations
        $log1 = "keylog.txt" nocase
        $log2 = ".log" nocase
        $log3 = "fwrite"
        
    condition:
        uint16(0) == 0x5A4D and
        2 of ($hook*) and
        1 of ($window*) and
        1 of ($log*)
}

// 10. Banking Trojan Detection
rule BankingTrojanDetection {
    meta:
        description = "Detects banking trojan characteristics"
        malware_type = "Banking Trojan"
        
    strings:
        // Web injection
        $inject1 = "document.forms" nocase
        $inject2 = "getElementsByName" nocase
        
        // Banking keywords
        $bank1 = "bank" nocase
        $bank2 = "credit" nocase
        $bank3 = "account" nocase
        
        // Form grabbing
        $form1 = "POST data" nocase
        $form2 = "password=" nocase
        $form3 = "cc=" nocase
        
    condition:
        uint16(0) == 0x5A4D and
        1 of ($inject*) and
        2 of ($bank*) and
        1 of ($form*)
}

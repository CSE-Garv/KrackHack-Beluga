import sys
import pefile
import math
import re
import PyPDF2
import olefile

sys.stdout.reconfigure(encoding='utf-8')

# Regex Patterns for Malicious Code Detection
SUSPICIOUS_PATTERNS = [
    r"powershell.exe\s+-[ecw]\s+[A-Za-z0-9+/=]+",  # Base64-encoded PowerShell
    r"eval\(",                                    # JavaScript obfuscation
    r"document.write\(",                          # Suspicious JavaScript execution
    r"subprocess\.",                              # Python executing system commands
    r"CreateRemoteThread",                        # Malware injecting into another process
]

# Shannon and R√©nyi Entropy Calculation
def calculate_entropy(data, alpha=2):
    if not data:
        return 0, 0  # Return both Shannon and R√©nyi as 0 if data is empty

    length = len(data)
    freq = {char: data.count(char) for char in set(data)}
    
    # Shannon entropy
    shannon = -sum((count / length) * math.log2(count / length) for count in freq.values())

    # R√©nyi entropy
    renyi = (1 / (1 - alpha)) * math.log2(sum((count / length) ** alpha for count in freq.values()))

    return shannon, renyi

# PE File Analysis (EXE/DLL)
def analyze_pe(filepath):
    try:
        pe = pefile.PE(filepath)
        suspicious_imports = ["LoadLibrary", "GetProcAddress", "VirtualAlloc", "CreateRemoteThread"]
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            for imp in entry.imports:
                if imp.name and any(susp_func in imp.name.decode() for susp_func in suspicious_imports):
                    return True
        return False
    except Exception:
        return False

# PDF Analysis
def analyze_pdf(filepath):
    try:
        with open(filepath, "rb") as file:
            reader = PyPDF2.PdfReader(file)
            for page in reader.pages:
                text = page.extract_text()
                if text and "JavaScript" in text:
                    return True
    except Exception:
        pass
    return False

# DOCX Analysis
def analyze_docx(filepath):
    try:
        if olefile.isOleFile(filepath):
            ole = olefile.OleFileIO(filepath)
            if "macros" in ole.listdir():
                return True
    except Exception:
        pass
    return False

# Regex-Based Scan
def regex_scan(filepath):
    try:
        with open(filepath, "r", errors="ignore") as file:
            content = file.read()
            for pattern in SUSPICIOUS_PATTERNS:
                if re.search(pattern, content):
                    print(f"‚ö†Ô∏è Regex Alert: Detected suspicious pattern - {pattern}")
                    return True
    except Exception:
        pass
    return False

# Risk Score Calculation
def calculate_risk_score(shannon_entropy, renyi_entropy, pe_suspicious, doc_suspicious, regex_suspicious):
    score = 0

    if shannon_entropy > 7.5:
        score += 3  # High entropy suggests obfuscation
    elif shannon_entropy > 6.5:
        score += 2

    if renyi_entropy > 7.0:
        score += 2  # High R√©nyi entropy also suggests obfuscation

    if pe_suspicious:
        score += 3  # Suspicious PE imports/API calls

    if doc_suspicious:
        score += 3  # Macros or JavaScript in documents

    if regex_suspicious:
        score += 2  # Regex detection

    return min(score, 10)  # Ensure max score is 10

# Main File Scanner
def scan_file(filepath):
    """Scans a file and assigns a risk score"""
    print(f"\nüîç Scanning: {filepath}")

    # Calculate Entropy
    try:
        with open(filepath, "rb") as file:
            data = file.read()
            shannon_entropy, renyi_entropy = calculate_entropy(data)
    except Exception:
        shannon_entropy, renyi_entropy = 0, 0

    # Perform other scans
    pe_suspicious = analyze_pe(filepath) if filepath.endswith((".exe", ".dll")) else False
    doc_suspicious = analyze_pdf(filepath) if filepath.endswith(".pdf") else analyze_docx(filepath) if filepath.endswith(".docx") else False
    regex_suspicious = regex_scan(filepath)

    # Calculate Risk Score
    risk_score = calculate_risk_score(shannon_entropy, renyi_entropy, pe_suspicious, doc_suspicious, regex_suspicious)

    print(f"üìä Shannon Entropy: {shannon_entropy:.3f}")
    print(f"üìä R√©nyi Entropy: {renyi_entropy:.3f}")
    print(f"üìä **Risk Score:** {risk_score}/10")

    if risk_score >= 7:
        print("üö® HIGH RISK: This file is likely malware!")
    elif risk_score >= 4:
        print("‚ö†Ô∏è MEDIUM RISK: Some suspicious elements detected.")
    else:
        print("‚úÖ LOW RISK: No obvious threats detected.")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python malware_scan.py <file_path>")
    else:
        scan_file(sys.argv[1])
